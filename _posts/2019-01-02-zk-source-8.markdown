---
layout: post
title:  "ZooKeeper源码阅读(8)-Leader选举"
date:   2019-01-02 03:49:45 +0200
categories: ZooKeeper 源码
---
从本文开始，我们会分析ZooKeeper在集群模式下是如何工作的，一般来说，集群会包含3个或者5个（奇数个，或者更多）ZooKeeper实例，奇数个的原因当然是因为要满足大多数原则（即一个请求要被大多数实例所认可，才能应用这个请求），从论文中我们知道，ZooKeeper在集群启动的时候，首先会进行leader选举，本文主要分析该选举是如何实现的。

关于集群的代码，基本都在包org.apache.zookeeper.server.quorum下面，集群中的每个ZooKeeper实例其实都是一个QuorumPeer:
{% highlight java %}
public class QuorumPeer extends ZooKeeperThread implements QuorumStats.Provider {
}
{% endhighlight %}
其中的代码比较多，我们一一来看， 首先我们知道ZooKeeper里面有leader, follower等概念，这些其实是该ZooKeeper实例的状态：
{% highlight java %}
public enum ServerState {
    LOOKING, FOLLOWING, LEADING, OBSERVING;
}
{% endhighlight %}
每个实例可以对应4种状态：
+ LOOKING: 寻找Leader的状态
+ FOLLOWING: 跟随Leader的状态
+ LEADING: 自己就是leader
+ OBSERVING: 观察者状态，和FOLLOWING的区别为该状态下不参与leader选举的投票

从QuorumPeer类的定义我们可以知道它是一个线程，故我们需要看一下该线程开始的时候都做了一些什么。
{% highlight java %}
@Override
public synchronized void start() {
    if (!getView().containsKey(myid)) {
        throw new RuntimeException("My id " + myid + " not in the peer list");
     }
    loadDataBase();//从snapshot及日志文件中中恢复
    startServerCnxnFactory();//启动server端传输
    try {
        adminServer.start();
    } catch (AdminServerException e) {
        LOG.warn("Problem starting AdminServer", e);
        System.out.println(e);
    }
    startLeaderElection();
    super.start();
}
{% endhighlight %}
总体而言其实和单机版的逻辑差不多，都是从snapshot及日志文件中恢复内存数据，然后接受请求，唯一的区别在于多了一行startLeaderElection(),对，就是开始leader选举工作，实际上在leader还没选举出来之前，ZooKeeper是不会处理任何事务性请求的。
{% highlight java %}
synchronized public void startLeaderElection() {
    try {
        if (getPeerState() == ServerState.LOOKING) {
            currentVote = new Vote(myid, getLastLoggedZxid(), getCurrentEpoch());
        }
    } catch(IOException e) {
        RuntimeException re = new RuntimeException(e.getMessage());
        re.setStackTrace(e.getStackTrace());
        throw re;
    }

    this.electionAlg = createElectionAlgorithm(electionType);
}
{% endhighlight %}
在startLeaderElection()函数中，其实也没有啥特别的动作，就是用(id,zxid和epoch)初始化了一下当前的投票，然后确定了一下leader选举的算法，但其实最后leader选举的算法就只有一个FastLeaderElection，其他的算法逐渐淘汰。

真正这个线程的逻辑在run()函数里：
{% highlight java %}
@Override
    public void run() {
        //other logics

        try {
            /*
             * Main loop
             */
            while (running) {
                switch (getPeerState()) {
                case LOOKING:
                    LOG.info("LOOKING");
                    ServerMetrics.LOOKING_COUNT.add(1);

                    if (Boolean.getBoolean("readonlymode.enabled")) {
                        LOG.info("Attempting to start ReadOnlyZooKeeperServer");

                        // Create read-only server but don't start it immediately
                        final ReadOnlyZooKeeperServer roZk =
                            new ReadOnlyZooKeeperServer(logFactory, this, this.zkDb);

                        // Instead of starting roZk immediately, wait some grace
                        // period before we decide we're partitioned.
                        //
                        // Thread is used here because otherwise it would require
                        // changes in each of election strategy classes which is
                        // unnecessary code coupling.
                        Thread roZkMgr = new Thread() {
                            public void run() {
                                try {
                                    // lower-bound grace period to 2 secs
                                    sleep(Math.max(2000, tickTime));
                                    if (ServerState.LOOKING.equals(getPeerState())) {
                                        roZk.startup();
                                    }
                                } catch (InterruptedException e) {
                                    LOG.info("Interrupted while attempting to start ReadOnlyZooKeeperServer, not started");
                                } catch (Exception e) {
                                    LOG.error("FAILED to start ReadOnlyZooKeeperServer", e);
                                }
                            }
                        };
                        try {
                            roZkMgr.start();
                            reconfigFlagClear();
                            if (shuttingDownLE) {
                                shuttingDownLE = false;
                                startLeaderElection();
                            }
                            setCurrentVote(makeLEStrategy().lookForLeader());
                        } catch (Exception e) {
                            LOG.warn("Unexpected exception", e);
                            setPeerState(ServerState.LOOKING);
                        } finally {
                            // If the thread is in the the grace period, interrupt
                            // to come out of waiting.
                            roZkMgr.interrupt();
                            roZk.shutdown();
                        }
                    } else {
                        try {
                           reconfigFlagClear();
                            if (shuttingDownLE) {
                               shuttingDownLE = false;
                               startLeaderElection();//发起leader选举
                               }
                            setCurrentVote(makeLEStrategy().lookForLeader());
                        } catch (Exception e) {
                            LOG.warn("Unexpected exception", e);
                            setPeerState(ServerState.LOOKING);
                        }                        
                    }
                    break;
                case OBSERVING:
                    try {
                        LOG.info("OBSERVING");
                        setObserver(makeObserver(logFactory));
                        observer.observeLeader();
                    } catch (Exception e) {
                        LOG.warn("Unexpected exception",e );
                    } finally {
                        observer.shutdown();
                        setObserver(null);
                        updateServerState();

                        // Add delay jitter before we switch to LOOKING
                        // state to reduce the load of ObserverMaster
                        if (isRunning()) {
                            Observer.waitForReconnectDelay();
                        }
                    }
                    break;
                case FOLLOWING:
                    try {
                       LOG.info("FOLLOWING");
                        setFollower(makeFollower(logFactory));
                        follower.followLeader();
                    } catch (Exception e) {
                       LOG.warn("Unexpected exception",e);
                    } finally {
                       follower.shutdown();
                       setFollower(null);
                       updateServerState();
                    }
                    break;
                case LEADING:
                    LOG.info("LEADING");
                    try {
                        setLeader(makeLeader(logFactory));
                        leader.lead();
                        setLeader(null);
                    } catch (Exception e) {
                        LOG.warn("Unexpected exception",e);
                    } finally {
                        if (leader != null) {
                            leader.shutdown("Forcing shutdown");
                            setLeader(null);
                        }
                        updateServerState();
                    }
                    break;
                }
                start_fle = Time.currentElapsedTime();
            }
        } finally {
            //other logics
        }
    }
{% endhighlight %}
这段代码正好和前面说的4种状态一一对应，run()函数主要是一个无限循环，然后根据自己的状态来做不同的操作，比如是LOOKING状态就需要开始leader选举，这里我们主要关注LOOKING状态下的lookForLeader()关键函数，其他状态下的实现之后再进行分析。

lookForLeader()这个函数是真正的leaderElection的实现，具体在类FastLeaderElection中。
{% highlight java %}
public Vote lookForLeader() throws InterruptedException {
}
{% endhighlight %}
该函数会返回一个投票，即告诉你谁是当前的leader.

来看一下该方法的说明：
> Starts a new round of leader election. Whenever our QuorumPeer
      changes its state to LOOKING, this method is invoked, and it
      sends notifications to all other peers.

即每当状态变成LOOKING时，该ZooKeeper实例就会发起一轮leader选举操作， 下面来具体分析这个函数：
{% highlight java %}
public Vote lookForLeader() throws InterruptedException {
        try {
            self.jmxLeaderElectionBean = new LeaderElectionBean();
            MBeanRegistry.getInstance().register(
                    self.jmxLeaderElectionBean, self.jmxLocalPeerBean);
        } catch (Exception e) {
            LOG.warn("Failed to register with JMX", e);
            self.jmxLeaderElectionBean = null;
        }
        if (self.start_fle == 0) {
           self.start_fle = Time.currentElapsedTime();
        }
        try {
            Map<Long, Vote> recvset = new HashMap<Long, Vote>();//当前选举轮次得到的投票回复

            Map<Long, Vote> outofelection = new HashMap<Long, Vote>();//用来记录加入现有集群得到的投票

            int notTimeout = finalizeWait;

            synchronized(this){
                logicalclock.incrementAndGet();//每次投票时都要更新一下自己的逻辑时钟
                updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());//且更新一下自己的投票
            }

            LOG.info("New election. My id =  " + self.getId() +
                    ", proposed zxid=0x" + Long.toHexString(proposedZxid));
            sendNotifications();//向其他各实例发送新的投票

            SyncedLearnerTracker voteSet;

            /*
             * Loop in which we exchange notifications until we find a leader
             */

            while ((self.getPeerState() == ServerState.LOOKING) &&
                    (!stop)){ //当状态是LOOKING且没有停止时，不断循环
                /*
                 * Remove next notification from queue, times out after 2 times
                 * the termination time
                 */
                Notification n = recvqueue.poll(notTimeout,
                        TimeUnit.MILLISECONDS);

                /*
                 * Sends more notifications if haven't received enough.
                 * Otherwise processes new notification.
                 */
                if(n == null){
                    if(manager.haveDelivered()){
                        sendNotifications(); //如果已经发送通知了但是没有收到回复，则再发送一遍
                    } else {
                        manager.connectAll(); //需要建立一下和其他实例的链接
                    }

                    /*
                     * Exponential backoff
                     */
                    int tmpTimeOut = notTimeout*2; //指数增加超时，防止超时太频繁
                    notTimeout = (tmpTimeOut < maxNotificationInterval?
                            tmpTimeOut : maxNotificationInterval);
                    LOG.info("Notification time out: " + notTimeout);
                }
                else if (validVoter(n.sid) && validVoter(n.leader)) { //首先验证下收到的投票的有效性
                    /*
                     * Only proceed if the vote comes from a replica in the current or next
                     * voting view for a replica in the current or next voting view.
                     */
                    switch (n.state) {
                    case LOOKING: //如果对方状态为LOOKING
                        if (getInitLastLoggedZxid() == -1) {// 此时如果本机没有任何事务，则直接忽略
                            LOG.debug("Ignoring notification as our zxid is -1");
                            break;
                        }
                        if (n.zxid == -1) {//如果对方也没有任何事务，则也直接忽略
                            LOG.debug("Ignoring notification from member with -1 zxid" + n.sid);
                            break;
                        }
                        // If notification > current, replace and send messages out
                        if (n.electionEpoch > logicalclock.get()) { //如果对方的选举周期比本机的逻辑时钟(本机的选举周期)要大
                            logicalclock.set(n.electionEpoch); //更新本机的逻辑时钟
                            recvset.clear();//清空当前收到的投票，因为要重新来过
                            if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,
                                    getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) {
                                //如果对方的投票比较新，比较的顺序为epoch, zxid和id
                                //如果对方的epoch比较大，则对方胜出，否则本机胜出
                                //在epoch相同的情况下，谁的zxid大谁胜出
                                //在epoch和zxid相同的情况下，谁的server id编号大谁胜出

                                updateProposal(n.leader, n.zxid, n.peerEpoch);
                            } else {
                                updateProposal(getInitId(),
                                        getInitLastLoggedZxid(),
                                        getPeerEpoch());
                            }
                            //更新完投票后重新发送投票
                            sendNotifications();
                        } else if (n.electionEpoch < logicalclock.get()) {//如果对方的选举周期比本机小，则直接忽略，因为对方肯定会收到本机发送过去的投票
                            if(LOG.isDebugEnabled()){
                                LOG.debug("Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x"
                                        + Long.toHexString(n.electionEpoch)
                                        + ", logicalclock=0x" + Long.toHexString(logicalclock.get()));
                            }
                            break;
                        } else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,
                                proposedLeader, proposedZxid, proposedEpoch)) {//如果选举周期相同且对方胜出，则更新本机的投票且重新发送投票
                            updateProposal(n.leader, n.zxid, n.peerEpoch);
                            sendNotifications();
                        }

                        if(LOG.isDebugEnabled()){
                            LOG.debug("Adding vote: from=" + n.sid +
                                    ", proposed leader=" + n.leader +
                                    ", proposed zxid=0x" + Long.toHexString(n.zxid) +
                                    ", proposed election epoch=0x" + Long.toHexString(n.electionEpoch));
                        }

                        // don't care about the version if it's in LOOKING state
                        recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));//把收到的投票加入recvset中

                        voteSet = getVoteTracker(
                                recvset, new Vote(proposedLeader, proposedZxid,
                                        logicalclock.get(), proposedEpoch));

                        if (voteSet.hasAllQuorums()) {//如果当前投票被大半ZooKeeper实例认可

                            // Verify if there is any change in the proposed leader
                            while((n = recvqueue.poll(finalizeWait,
                                    TimeUnit.MILLISECONDS)) != null){
                                if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch,
                                        proposedLeader, proposedZxid, proposedEpoch)){
                                    recvqueue.put(n);
                                    break;
                                }
                            }

                            /*
                             * This predicate is true once we don't read any new
                             * relevant message from the reception queue
                             */
                            if (n == null) {
                                setPeerState(proposedLeader, voteSet);
                                //最后的Leader投票
                                Vote endVote = new Vote(proposedLeader,
                                        proposedZxid, logicalclock.get(),
                                        proposedEpoch);
                                leaveInstance(endVote);
                                return endVote;
                            }
                        }
                        break;
                    case OBSERVING://观察者模式下不参与投票
                        LOG.debug("Notification from observer: " + n.sid);
                        break;
                    case FOLLOWING:
                    case LEADING:
                        /*
                         * Consider all notifications from the same epoch
                         * together.
                         */
                        //这种情况就是加入已有集群
                        if(n.electionEpoch == logicalclock.get()){ //如果对方的选举周期和本机逻辑时钟相同
                            recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));
                            voteSet = getVoteTracker(recvset, new Vote(n.version,
                                      n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));
                            if (voteSet.hasAllQuorums() &&
                                    checkLeader(outofelection, n.leader, n.electionEpoch)) {//判断leader时候在leading
                                setPeerState(n.leader, voteSet);
                                Vote endVote = new Vote(n.leader,
                                        n.zxid, n.electionEpoch, n.peerEpoch);
                                leaveInstance(endVote);
                                return endVote;
                            }
                        }

                        /*
                         * Before joining an established ensemble, verify that
                         * a majority are following the same leader.
                         */
                        outofelection.put(n.sid, new Vote(n.version, n.leader,
                                n.zxid, n.electionEpoch, n.peerEpoch, n.state));//不管周期相不相同，加入outofelection
                        voteSet = getVoteTracker(outofelection, new Vote(n.version,
                                n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));

                        if (voteSet.hasAllQuorums() &&
                                checkLeader(outofelection, n.leader, n.electionEpoch)) {//同样验证Leader在leading
                            synchronized(this){
                                logicalclock.set(n.electionEpoch);
                                setPeerState(n.leader, voteSet);
                            }
                            Vote endVote = new Vote(n.leader, n.zxid,
                                    n.electionEpoch, n.peerEpoch);
                            leaveInstance(endVote);
                            return endVote;
                        }
                        break;
                    default:
                        LOG.warn("Notification state unrecoginized: " + n.state
                              + " (n.state), " + n.sid + " (n.sid)");
                        break;
                    }
                } else {
                    if (!validVoter(n.leader)) {
                        LOG.warn("Ignoring notification for non-cluster member sid {} from sid {}", n.leader, n.sid);
                    }
                    if (!validVoter(n.sid)) {
                        LOG.warn("Ignoring notification for sid {} from non-quorum member sid {}", n.leader, n.sid);
                    }
                }
            }
            return null;
        } finally {
            try {
                if(self.jmxLeaderElectionBean != null){
                    MBeanRegistry.getInstance().unregister(
                            self.jmxLeaderElectionBean);
                }
            } catch (Exception e) {
                LOG.warn("Failed to unregister with JMX", e);
            }
            self.jmxLeaderElectionBean = null;
            LOG.debug("Number of connection processing threads: {}",
                    manager.getConnectionThreadCount());
        }
    }
{% endhighlight %}
其中重要的逻辑部分均已加上注释，主要就是更新自己的投票，发送给其他ZooKeeper实例，然后根据对方返回的投票来进行调整，要么重新发送投票，要么判断投票有没有被超过半数的实例所接受，是的话那么那个投票投的ZooKeeoer实例就是leader.

下文主要分析在leadder选举出来后，follower和leader之间怎么进行数据同步。

------------------------------------
ZooKeeper 源码地址：[https://github.com/apache/zookeeper](https://github.com/apache/zookeeper)

参考书籍：《从Paxos到Zookeeper 分布式一致性原理与实践》
