---
layout: post
title:  "ZooKeeper源码阅读(11)-集群中Follower的责任链"
date:   2019-01-03 05:49:45 +0900
categories: ZooKeeper 源码
---
上文分析了集群中leader是怎么处理请求的，本文主要分析follower是怎么处理请求的，主要代码在FollowerZooKeeperServer中。

> Just like the standard ZooKeeperServer. We just replace the request
  processors: FollowerRequestProcessor -> CommitProcessor ->
  FinalRequestProcessor

Follower的责任链也相对来说比较简单，主要有三个处理器，其中CommitProcessor和FianlRequestProcessor我们在之前都已经分析过了，那么本文就主要分析FollowerRequestProcessor。

来看一下该类的注释：
> This RequestProcessor forwards any requests that modify the state of the
  system to the Leader.

这也说明了follower是如何应对请求的：
1. 如果是读操作，就自己处理
2. 如果是写操作，就转移给leader

来看下具体实现：
{% highlight java %}
public void run() {
    try {
        while (!finished) {
            Request request = queuedRequests.take(); //每次都请求队列中去除一个请求
            if (request == Request.requestOfDeath) { //结束请求
                break;
            }
            // 不管是读请求还是写请求，都先交给下一个处理器，如果是写请求，则在commitProcessor中会等待leader的通知
            nextProcessor.processRequest(request);

            // We now ship the request to the leader. As with all
            // other quorum operations, sync also follows this code
            // path, but different from others, we need to keep track
            // of the sync operations this follower has pending, so we
            // add it to pendingSyncs.
            switch (request.type) {
            case OpCode.sync:
                zks.pendingSyncs.add(request);
                zks.getFollower().request(request); //发送请求给leader
                break;
            case OpCode.create: //均是事务性请求类型
            case OpCode.create2:
            case OpCode.createTTL:
            case OpCode.createContainer:
            case OpCode.delete:
            case OpCode.deleteContainer:
            case OpCode.setData:
            case OpCode.reconfig:
            case OpCode.setACL:
            case OpCode.multi:
            case OpCode.check:
                zks.getFollower().request(request);//发送请求给leader
                break;
            case OpCode.createSession:
            case OpCode.closeSession:
                // Don't forward local sessions to the leader.
                if (!request.isLocalSession()) {
                    zks.getFollower().request(request);
                }
                break;
            }
        }
    } catch (Exception e) {
        handleException(this.getName(), e);
    }
    LOG.info("FollowerRequestProcessor exited loop!");
}
{% endhighlight %}
具体逻辑已经标注在代码中，follower的逻辑相对来说还是比较简单的。
------------------------------------
ZooKeeper 源码地址：[https://github.com/apache/zookeeper](https://github.com/apache/zookeeper)

参考书籍：《从Paxos到Zookeeper 分布式一致性原理与实践》
