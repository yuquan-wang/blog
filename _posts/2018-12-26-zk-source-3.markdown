---
layout: post
title:  "ZooKeeper源码阅读(3)-服务端单机启动"
date:   2018-12-26 11:49:45 +0200
categories: ZooKeeper 源码
---
ZooKeeper 源码地址：[https://github.com/apache/zookeeper](https://github.com/apache/zookeeper)

参考书籍：《从Paxos到Zookeeper 分布式一致性原理与实践》

前面两篇文章讲述了客户端方面的源码，接下来来看服务端的代码，服务端代码众多，故打算先从服务端单机启动开始遍历整个流程，搞清服务端通信过程，再研究服务端集群代码。。。。

服务端单机启动的整体流程如题所示，图为参考书籍中截图：
![png1]({{ site.baseurl }}/assets/img/zk/1.png){: .center-image }
我们直接从单机启动开始，单机启动的代码为ZooKeeperServerMain，其中最主要的代码(做了一些删减)如下：
{% highlight java %}
public void runFromConfig(ServerConfig config)
        throws IOException, AdminServerException {
    FileTxnSnapLog txnLog = null;
    try {
        //log相关
        txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);
        //创建ZooKeeperServer示例
        final ZooKeeperServer zkServer = new ZooKeeperServer(txnLog,
                config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, null);
        //设置服务端统计器
        txnLog.setServerStats(zkServer.serverStats());

        boolean needStartZKServer = true;
        if (config.getClientPortAddress() != null) {
            cnxnFactory = ServerCnxnFactory.createFactory();
            cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), false);
            cnxnFactory.startup(zkServer);
            // zkServer has been started. So we don't need to start it again in secureCnxnFactory.
            needStartZKServer = false;
        }
        if (config.getSecureClientPortAddress() != null) {
            secureCnxnFactory = ServerCnxnFactory.createFactory();
            secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), true);
            secureCnxnFactory.startup(zkServer, needStartZKServer);
        }
        // others
    } catch (InterruptedException e) {
        // warn, but generally this is ok
        LOG.warn("Server interrupted", e);
    } finally {
        if (txnLog != null) {
            txnLog.close();
        }
    }
}
{% endhighlight %}
可以看到，主要是创建了ZooKeeperServer实例，并做了一些数据统计器的设置工作，然后实例化了cnxnFactory或者secureCnxnFactory（一个是不加密，一个是加密，然后启动该线程，故最重要的代码便在NIOServerCnxnFactory（这里我们只关注NIO原生实现，Netty有类似实现）的startup函数：
{% highlight java %}
public void startup(ZooKeeperServer zks, boolean startServer)
            throws IOException, InterruptedException {
        start();
        setZooKeeperServer(zks);
        if (startServer) {
            zks.startdata();
            zks.startup();
        }
    }
{% endhighlight %}
这几个函数都做了不少事情，需要一一来看，首先第一个start()函数：
{% highlight java %}
public void start() {
        stopped = false;
        if (workerPool == null) {
            workerPool = new WorkerService(
                "NIOWorker", numWorkerThreads, false);
        }
        for(SelectorThread thread : selectorThreads) {
            if (thread.getState() == Thread.State.NEW) {
                thread.start();
            }
        }
        // ensure thread is started once and only once
        if (acceptThread.getState() == Thread.State.NEW) {
            acceptThread.start();
        }
        if (expirerThread.getState() == Thread.State.NEW) {
            expirerThread.start();
        }
    }
{% endhighlight %}
在该start()函数中，主要是启动各个线程,其中accept线程会用于接受客户端新请求，selector线程会用于处理客户端请求，具体如何处理我们在下一篇中具体分析。

接下来来看ZooKeeperServer的startdata()函数：
{% highlight java %}
public void startdata()
    throws IOException, InterruptedException {
        //check to see if zkDb is not null
        if (zkDb == null) {
            zkDb = new ZKDatabase(this.txnLogFactory);
        }
        if (!zkDb.isInitialized()) {
            loadData();
        }
    }
{% endhighlight %}
在该函数中主要是调用loadData()函数来加载本地数据来完成初始化。

接下来来看ZooKeeperServer的startup()函数：
{% highlight java %}
public synchronized void startup() {
        if (sessionTracker == null) {
            createSessionTracker();
        }
        startSessionTracker();
        setupRequestProcessors();

        registerJMX();

        setState(State.RUNNING);
        notifyAll();
    }
{% endhighlight %}
在该函数中，首先会创建并启动一个会话处理器，然后设置一系列责任链处理器，接下来是注册JMX(Java Management Extensions)服务,然后将状态设置为running,完成服务器启动。

这篇文章只是过一下ZooKeeper服务器单机启动的整个流程，很多细节会在后面的文章中一一叙述。
